# import pandas as pd
# from sklearn.ensemble import RandomForestClassifier
# from sklearn.model_selection import train_test_split
# import joblib  # Modeli kaydetmek iÃ§in kullanÄ±lÄ±r
# import numpy as np

# # # Veri setini yÃ¼kle
# # df_main = pd.read_csv("Training.csv")

# # # Ã–zellikleri (X) ve hedef deÄŸiÅŸkeni (y) ayÄ±r
# # X = df_main.drop(columns=['Disease'], axis=1)
# # y = df_main['Disease']

# # # EÄŸitim ve test verisi olarak ayÄ±r
# # X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=40)

# # # RandomForest modelini oluÅŸtur ve eÄŸit
# # model = RandomForestClassifier(n_estimators=100, random_state=42)
# # model.fit(X_train, y_train)

# # # EÄŸitilen modeli bir dosyaya kaydet
# # joblib.dump(model, 'disease_model.pkl')

# # print("Model baÅŸarÄ±yla eÄŸitildi ve 'disease_model.pkl' dosyasÄ±na kaydedildi.")
# #         confidence = np.max(prediction[0])
# #         return {  


# # Modeli yÃ¼kle
# model = joblib.load('disease_model.pkl')

# # Ã–rnek input verisi (WBC, RBC, HGB, PLT, NEUT, LYMPH, MONO, EO, BASO)
# # Bu deÄŸerleri uygun ÅŸekilde deÄŸiÅŸtirerek test edebilirsin
# sample_input = np.array([5.2, 4.5, 13.0, 50, 60, 30, 6, 2, 0.5]).reshape(1, -1)

# # Tahmin yap
# prediction = model.predict(sample_input)[0]

# # Tahmin edilen sonucu isme Ã§evir
# disease = {0: 'Anemia', 1: 'Polycythemia', 2: 'Leukocytosis', 3: 'Leukopenia', 4: 'Thrombocytopenia',
#            5: 'Thrombocytosis', 6: 'Neutropenia', 7: 'Neutrophilia', 8: 'Lymphocytopenia', 9: 'Lymphocytosis',
#            10: 'Monocytes high', 11: 'Eosinophil high', 12: 'Basophil high', 13: 'Normal'}

# print(f"Tahmin edilen hastalÄ±k: {disease[prediction]} (sÄ±nÄ±f: {prediction})")


import pandas as pd
import joblib
import numpy as np
from sklearn.preprocessing import LabelEncoder

# ğŸ”¹ Modeli yÃ¼kle
model = joblib.load("anemia_model.pkl")

# ğŸ”¹ LabelEncoder sÄ±nÄ±flarÄ±
label_encoder = LabelEncoder()
label_encoder.classes_ = np.array([
    'Healthy',
    'Iron deficiency anemia',
    'Leukemia',
    'Leukemia with thrombocytopenia',
    'Macrocytic anemia',
    'Normocytic hypochromic anemia',
    'Normocytic normochromic anemia',
    'Other microcytic anemia',
    'Thrombocytopenia'
])

# ğŸ”¹ Veriyi yÃ¼kle
df = pd.read_csv("diagnosed_cbc_data_v4.csv")

# ğŸ”¹ Modelin kullandÄ±ÄŸÄ± sÃ¼tunlara gÃ¶re sadece feature'larÄ± al
features = ['WBC', 'LYMp', 'NEUTp', 'LYMn', 'NEUTn', 'RBC', 'HGB', 'HCT', 'MCV', 'MCH', 'MCHC', 'PLT', 'PDW', 'PCT']

X_sample = df[features].iloc[:3]  # ilk 3 satÄ±r

# ğŸ”¹ Tahmin yap
y_pred_encoded = model.predict(X_sample)

# ğŸ”¹ Etikete Ã§evir
y_pred_labels = label_encoder.inverse_transform(y_pred_encoded)

# ğŸ”¹ SonuÃ§larÄ± yazdÄ±r
for i, label in enumerate(y_pred_labels):
    print(f"ğŸ“Š SatÄ±r {i+1} â†’ Tahmin edilen anemi tÃ¼rÃ¼: {label}")

